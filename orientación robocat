

#define _DEBUG_

long distancia;
long tiempo;

int sensor2;
int sensor3;
int sensor4;
int error;

//asignación de los pines del driver
int IN1 = 10    // Input3 conectada al pin 
int IN2 = 9    // Input4 conectada al pin  
int ENA = 11    // ENB conectada al pin  de Arduino
int IN3 = 5    // Input3 conectada al pin 
int IN4 = 4    // Input4 conectada al pin  
int ENB = 3    // ENB conectada al pin  de Arduino

void leyendo_sensor_distancia (void);
void lecturas_sensor_blanco_negro (void);
void trayecto_carga_manual (void);

void setup(){


 //activación de los pines del driver
 pinMode (ENA, OUTPUT); 
 pinMode (IN1, OUTPUT);
 pinMode (IN2, OUTPUT);
 pinMode (ENB, OUTPUT); 
 pinMode (IN3, OUTPUT);
 pinMode (IN4, OUTPUT);
 
 
 
#ifdef _DEBUG_ 
 Serial.begin(9600); //Enable Serial Communications
#endif

  //salidas y entradas sensor distancia
  pinMode(7, OUTPUT); /*activación del pin 9 como salida: para el pulso ultrasónico*/
  pinMode(6, INPUT); /*activación del pin 8 como entrada: tiempo del rebote del ultrasonido*/
  
  //salidas control motores
  
  
   
   
   
   




}

void loop(){
  
  leyendo_sensor_distancia ();
  lecturas_sensor_blanco_negro ();
  trayecto_carga_manual ();
  
 //comienzo del programa de orientación
 
 do { girar sentido horario }
 while (distancia > 50);
 parar
 
 do { girar sentido horario }
 while (distancia > 50);
 gira 90º en sentido horario
 
 if (distancia >100)
 {gira 180º en sentido horario}
 
 //comienzo del programa de cargar bolas de forma manual
 
 

}

void leyendo_sensor_distancia (){

  digitalWrite(7,LOW); /* Por cuestión de estabilización del sensor*/
  delayMicroseconds(5);
  digitalWrite(7, HIGH); /* envío del pulso ultrasónico*/
  delayMicroseconds(10);
  tiempo=pulseIn(6, HIGH); /* Función para medir la longitud del pulso entrante. Mide el tiempo que transcurrido entre el envío
  del pulso ultrasónico y cuando el sensor recibe el rebote, es decir: desde que el pin 8 empieza a recibir el rebote, HIGH, hasta que
  deja de hacerlo, LOW, la longitud del pulso entrante*/
  distancia= int(0.017*tiempo); /*fórmula para calcular la distancia obteniendo un valor entero*/
  /*Monitorización en centímetros por el monitor serial*/

  Serial.println("Distancia ");
  Serial.println(distancia);
  Serial.println(" cm");
  delay(500);

}

void lecturas_sensor_blanco_negro () {

#ifdef _DEBUG_   
    Serial.println("error");
    Serial.println(error);
    Serial.println("sensor 2");
    Serial.println(sensor2);
    Serial.println("sensor 3");
    Serial.println(sensor3);
    Serial.println("sensor 4");
    Serial.println(sensor4);
#endif   

 sensor2=digitalRead(A2);
 sensor3=digitalRead(A3);
 sensor4=digitalRead(A4);

    // amb 3 sensors

    if(sensor2==0 && sensor3 ==0 && sensor4==0){error=0;}//ves recte
    else if(sensor2==1 && sensor3==1 && sensor4==0){error=-1;}
    else if(sensor2 ==1 && sensor3==0 && sensor4==0){error=-2;}
    else if( sensor2==0 && sensor3==1 && sensor4==0 ){error=0;}
    else if( sensor2==0 && sensor3==1 && sensor4==1 ){error=1;}
    else if( sensor2==0 && sensor3 ==0 && sensor4 ==1 ){error=2;}
    else if( sensor2==1 && sensor3 ==1 && sensor4 ==1 ){error=3;}

}
void trayecto-carga_manual () {
//nota: hay que modificar los pines a los reales.

//hay que cambiar lo que hace el robot, básicamente haremos que vaya recto pero girando para que se vaya apoyando en 
//la linea negra. Cuando haya visto la linea negra dos veces se parará y girará.

for (int i=0; i<2; i++)
{
do (  

if (error ==0) {      //ves recte si es blanc o la línia negra està al centre del vehicle
     analogWrite (9,80);  //lrft motor
     analogWrite (10,80);  //right motor
     delay(100);}

     else if (error ==1) {  //gira molt 
     analogWrite (9,90);    //lrft motor
     analogWrite (10,130);  //right motor
     digitalWrite(5,LOW);
     digitalWrite(6,HIGH);
     delay(150);}

     else if (error ==2) {   //gira lent
     analogWrite (9,90);    //lrft motor
     analogWrite (10,110);  //right motor
     digitalWrite(5,LOW);
     digitalWrite(6,HIGH);
     delay(150);}

     else if (error ==-1) {  //gira molt
     analogWrite (9,130);  //lrft motor
     analogWrite (10,90);  //right motor
     digitalWrite(7,LOW);
     digitalWrite(8,HIGH);
     delay(150);}

     else if (error ==-2) {   //gira lent
     analogWrite (9,110);  //lrft motor
     analogWrite (10,90);  //right motor
     digitalWrite(7,LOW);
     digitalWrite(8,HIGH);
     delay(150);}

    
)
while (error!=3);

girar 180º en sentido horario
delay (10000); //introducir el tiempo de carga de bolas
}

